// Clases Tarjeta y NÃºmero

#ifndef TARJETA_HPP_
#define TARJETA_HPP_

#include "usuario.hpp"
#include "../P1/cadena.hpp"
#include "../P1/fecha.hpp"
#include <set>

class Usuario;

class EsBlanco: public std::unary_function <char, bool>{
public:
    bool operator ()(char c) const;
};

class EsDigito: public std::unary_function <char, bool>{
public:
    bool operator ()(char c) const;
};


class Numero{
public:
    Numero(const Cadena& num);

    operator const char*() const;

    friend bool operator < (const Numero& n1, const Numero& n2);

    enum Razon {LONGITUD, NO_VALIDO, DIGITOS};

    class Incorrecto{
    public:
        Incorrecto(Razon r): fallo_(r) {}
        const Razon& razon() const {return fallo_;};
    private:
        Razon fallo_;
    };

private:
    Cadena numero_;
    Cadena elimina_espacio(const Cadena& cad);
    Cadena longitud_cadena(const Cadena& cad);
};

class Tarjeta{
public:
  typedef std::set<Numero> Tarjetas;
    
    enum Tipo {Otro, VISA, Mastercard, Maestro, JCB, AmericanExpress};

    Tarjeta(const Numero& n, Usuario& u, const Fecha& f);

    Tarjeta(const Tarjeta& t) = delete;
    Tarjeta& operator =(const Tarjeta& t) = delete;

    Tipo tipo() const {return tipo_;};
    Numero numero() const {return numero_;};
    const Usuario* titular() const {return titular_;};
    Fecha caducidad() const {return fcaduc_;};
    bool activa() const {return activa_;}

    bool activa(bool);

    friend class Usuario;

    ~Tarjeta();

    class Caducada{
    public:
        Caducada(const Fecha& f):f_(f) {}
        Fecha cuando() const {return f_;};
    private:
        Fecha f_;
    };

    class Num_duplicado{
    public:
        Num_duplicado(const Numero& num): n_(num) {}
        Numero que() const {return n_;};
    private:
        Numero n_;
    };

    class Desactivada{

    };

private:
    Tipo tipo_;
    Numero numero_;
    const Usuario* titular_;
    Fecha fcaduc_;
    bool activa_;
    static Tarjetas tarjetas_;  

    void anula_titular();
};

std::ostream& operator << (std::ostream& output ,const Tarjeta::Tipo& t);
std::ostream& operator << (std::ostream& output, const Tarjeta& t);
bool operator <(const Tarjeta& t1, const Tarjeta& t2);


#endif
